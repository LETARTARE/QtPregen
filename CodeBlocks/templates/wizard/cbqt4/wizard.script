////////////////////////////////////////////////////////////////////////////////
//
// Code::Blocks new project wizard script
//
// Project	: CbQt4 project  :  (with Qt4.x only)
// Author	: LETARTARE http://forums.codeblocks.org
// Modified	: LETARTARE February 9 2015  r23
//
////////////////////////////////////////////////////////////////////////////////

// globals
QtPathDefault    <- _T("$(#qt4)");
QtPathDefaultInc <- _T("");
QtPathDefaultLib <- _T("");
QtPath <- _T("");
QtPathSpecs <- _T("mkspecs") + wxFILE_SEP_PATH + _T("win32-g++") ;

function BeginWizard()
{
    local intro_msg = _("Welcome to the new Trolltech CbQt4 project wizard!\n" +
                         "This wizard will guide you to create a new CbQt4 project\n" +
                         "using the Trolltech Qt4.x cross-platform GUI toolkit\n\n" +
                         "When you're ready to proceed, please click \"Next\"...");
// -> LETARTARE
	local  advice_msg =_("This is an experimental wizard, using a plugin\n" +
						 "'QtPreGen-x.y.z', which allows generate additional files for Qt:\n" +
						 "- meta-objects ('Q_OBJECT', 'Q_GADGET' in .h, .hpp, .cpp)\n" +
						 "- forms (.ui)\n" +
						 "- resources (.qrc).\n" +
						 "When you're ready to proceed, please click \"Next\"...\n\n");
// <--

    local qtpath_msg = _("Please select the location of Qt4 on your computer.\n" +
                          "This is the top-level folder where Qt4 was installed.\n" +
                          "To help you, this folder must contain the subfolders\n" +
                          "\"include\" and \"lib\".");

    Wizard.AddInfoPage(_T("QtIntro"), intro_msg);
//--> LETARTARE
    Wizard.AddInfoPage(_T("QtAdvice"), advice_msg);
// <--
    Wizard.AddGenericSelectPathPage(_T("QtPath"), qtpath_msg, _("Qt's location:"), QtPathDefault);

    Wizard.AddProjectPathPage();
    Wizard.AddCompilerPage(_T(""), _T("gcc*;qt*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// Qt's path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_QtPath(fwd)
{
    if (fwd)
    {
		// txtFolder is the text control in GenericSelectPathPage
        local dir         = Wizard.GetTextControlValue(_T("txtFolder"));
        local dir_nomacro = VerifyDirectory(dir);

        if (dir_nomacro.IsEmpty())
            return false;

        QtPathDefault = dir;
        QtPathDefaultInc = QtPathDefault  +  wxFILE_SEP_PATH + _T("include");
        QtPathDefaultLib = QtPathDefault  +  wxFILE_SEP_PATH + _T("lib");

        // verify include dependencies
        local dir_nomacro_inc = GetCompilerIncludeDir(dir, QtPathDefault, QtPathDefaultInc);
        if (dir_nomacro_inc.IsEmpty())
            return false;
        if (PLATFORM == PLATFORM_MSW
            && !VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + _T("QtGui"), _T("QApplication"), _("Qt's include")))
            return false;

        // verify library dependencies
        local dir_nomacro_lib = GetCompilerLibDir(dir, QtPathDefault, QtPathDefaultLib);
        if (dir_nomacro_lib.IsEmpty())
            return false;

        if (PLATFORM == PLATFORM_MSW && !VerifyLibFile(dir_nomacro_lib, _T("QtCore4"), _T("Qt's")))
            return false;
        else
        if (PLATFORM != PLATFORM_MSW && !VerifyLibFile(dir_nomacro_lib, _T("QtCore"), _T("Qt's")))
            return false;

        // Remember the original selection.
        QtPath = dir;

        local is_macro = _T("");

        // try to resolve the include directory as macro
        is_macro = GetCompilerIncludeMacro(dir, QtPathDefault, QtPathDefaultInc);
        if (is_macro.IsEmpty())
        {
            // not possible -> use the real inc path we had computed instead
            QtPathDefaultInc = dir_nomacro_inc;
        }

        // try to resolve the library directory as macro
        is_macro = GetCompilerLibMacro(dir, QtPathDefault, QtPathDefaultLib);
        if (is_macro.IsEmpty())
        {
            // not possible -> use the real lib path we had computed instead
            QtPathDefaultLib = dir_nomacro_lib;
        }
    }
    return true;
}

// return the files this project contains
function GetFilesDir()
{
// -->  LETARTARE
	// -> main.cpp, qtest.h, qtest.cpp
	return _T("cbqt4/files");
// <--
}

// setup the already created project
function SetupProject(project)
{
    project.AddIncludeDir(QtPathDefaultInc);
// --> LETARTARE
    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtCore"));
// <--
	project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtGui"));
// --> LETARTARE
	project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + QtPathSpecs);
// <--
    project.AddLibDir(QtPathDefaultLib);
// --> LETARTARE
    project.AddCompilerOption (_T("-frtti"));
    project.AddCompilerOption (_T("-DUNICODE"));
    project.AddCompilerOption (_T("-DQT_LARGEFILE_SUPPORT"));
    project.AddCompilerOption (_T("-DQT_GUI_LIB"));
    project.AddCompilerOption (_T("-DQT_CORE_LIB") );
    project.AddCompilerOption (_T("-DQT_HAVE_MMX") );
    project.AddCompilerOption (_T("-DQT_HAVE_3DNOW"));
    project.AddCompilerOption (_T("-DQT_HAVE_SSE") );
    project.AddCompilerOption (_T("-DQT_HAVE_MMXEXT"));
    project.AddCompilerOption (_T("-DQT_HAVE_SSE2") );
  //  project.AddCompilerOption (_T("-DQT_NEEDS_QMAIN") );

 // enable compiler exception
    local idcompiler = Wizard.GetCompilerID();
	CppExceptionsOn(project, idcompiler);
//print(idcompiler);
	if ( idcompiler.Find(_T("gcc")) != -1 ) {
		project.AddCompilerOption(_T("-mthreads")) ;
		project.AddCompilerOption (_T("-DQT_THREAD_SUPPORT"));
		project.AddLinkerOption (_T("-mthreads") );
	}

    project.AddLinkerOption (_T("--enable-stcall-fixup") );
    project.AddLinkerOption (_T("--enable-auto-import") );
    project.AddLinkerOption (_T("--enable-runtime-pseudo-reloc") );
    project.AddLinkerOption (_T("-mconsole") );
    project.AddLinkerOption (_T("-mwindows") );
// <--
    // enable compiler warnings (project-wide)
    WarningsOn(project, idcompiler);


    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
		// ttConsoleOnly: console for debugging
        target.SetTargetType(ttConsoleOnly);
        target.AddLibDir(QtPathDefaultLib);
// -> LETARTARE
		// add link libraries
		if (PLATFORM == PLATFORM_MSW)    {
			target.AddLinkLib(_T("QtCored4"));
			target.AddLinkLib(_T("QtGuid4"));
		}
		else {
			target.AddLinkLib(_T("QtCored"));
			target.AddLinkLib(_T("QtGuid"));
		}
// <--
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable generation of debugging symbols for target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release
    local target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
		// ttExecutable: no console
        target.SetTargetType(ttExecutable);
        target.AddLibDir(QtPathDefaultLib);
// -> LETARTARE
        // add link libraries
		if (PLATFORM == PLATFORM_MSW) {
			target.AddLinkLib(_T("QtCore4"));
			target.AddLinkLib(_T("QtGui4"));
		}
		else {
			target.AddLinkLib(_T("QtCore"));
			target.AddLinkLib(_T("QtGui"));
		}
// <--
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
    }


    return true;
}
