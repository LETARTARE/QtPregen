Index: src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp	(copie de travail)
@@ -0,0 +1,19 @@
+//------------------------------------------------------------------------------
+// project CbQt  with Qt5.x
+// main.cpp
+//------------------------------------------------------------------------------
+#include <QApplication>
+
+#include "qtest.h"
+//------------------------------------------------------------------------------
+int main(int argc, char *argv[])
+{
+
+	QApplication a(argc, argv);
+
+	Qtest w;
+	w.show();
+
+	return a.exec();
+}
+//------------------------------------------------------------------------------
Index: src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp	(copie de travail)
@@ -0,0 +1,36 @@
+//------------------------------------------------------------------------------
+// qtest.cpp
+//------------------------------------------------------------------------------
+#include "qtest.h"
+
+#include <QMessageBox>
+//------------------------------------------------------------------------------
+//ctor
+Qtest::Qtest(QWidget *parent, Qt::WindowFlags  flags)
+	: QWidget(parent, flags)
+{
+	setMinimumSize(140, 40) ;
+
+    button = new QPushButton("Test", this);
+
+   	connect( button, SIGNAL(clicked()), this, SLOT(press()) );
+
+   	connect( this, SIGNAL(click()), this, SLOT(message()) );
+}
+//------------------------------------------------------------------------------
+//dtor
+Qtest::~Qtest()
+{
+}
+//------------------------------------------------------------------------------
+void Qtest::press()
+{
+    QMessageBox::information(this, "Qtest", "Slots is OK !");
+    emit click();
+}
+//------------------------------------------------------------------------------
+void Qtest::message()
+{
+    QMessageBox::information(this, "Qtest", "Signals is OK !");
+}
+//------------------------------------------------------------------------------
Index: src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h	(copie de travail)
@@ -0,0 +1,47 @@
+//------------------------------------------------------------------------------
+// qtest.h
+//------------------------------------------------------------------------------
+#ifndef _QTEST_H
+#define _QTEST_H
+//------------------------------------------------------------------------------
+#include <QWidget>
+#include <QPushButton>
+//------------------------------------------------------------------------------
+/** \brief  : Application test for QtPregen
+ */
+class Qtest : public QWidget
+{
+	Q_OBJECT
+
+    public:
+    	/** \brief Test application constructor
+    	 *  @param parent : widget parent
+    	 *  @param flags : widget flags
+    	 */
+		Qtest ( QWidget *parent = 0, Qt::WindowFlags flags = 0 );
+		/** \brief Test application destructor
+    	 */
+		virtual ~Qtest ();
+
+    protected:
+
+	protected slots:
+		/** \brief  : Message button clicked
+		 */
+		void press();
+		/** \brief : Message button click
+		 */
+		void message();
+
+    private:
+    	/** \brief  : Button
+		 */
+        QPushButton * button;
+
+    signals:
+    	/** \brief  : Button click signal
+		 */
+        void click();
+};
+
+#endif // _QTEST_H
Index: src/plugins/scriptedwizard/resources/cbqt5/logo.png
===================================================================
Impossible d'afficher : fichier considéré comme binaire.
svn:mime-type = application/octet-stream
Index: src/plugins/scriptedwizard/resources/cbqt5/logo.png
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/logo.png	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/logo.png	(copie de travail)

Modification de propriétés sur src/plugins/scriptedwizard/resources/cbqt5/logo.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: src/plugins/scriptedwizard/resources/cbqt5/wizard.png
===================================================================
Impossible d'afficher : fichier considéré comme binaire.
svn:mime-type = application/octet-stream
Index: src/plugins/scriptedwizard/resources/cbqt5/wizard.png
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/wizard.png	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/wizard.png	(copie de travail)

Modification de propriétés sur src/plugins/scriptedwizard/resources/cbqt5/wizard.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: src/plugins/scriptedwizard/resources/cbqt5/wizard.script
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/wizard.script	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/wizard.script	(copie de travail)
@@ -0,0 +1,274 @@
+////////////////////////////////////////////////////////////////////////////////
+//
+// Code::Blocks new project wizard script
+//
+// Project	: CbQt5 project  :  (with Qt5.x only)
+// Author	: LETARTARE http://forums.codeblocks.org
+// Modified	: LETARTARE June 18, 2019
+//
+////////////////////////////////////////////////////////////////////////////////
+
+// globals
+QtPathDefault5   <- _T("$(#qt5)");
+QtPathDefaultInc <- _T("");
+QtPathDefaultLib <- _T("");
+QtPath5 <- _T("");
+QtPathSpecs <- _T("mkspecs") + wxFILE_SEP_PATH + _T("win32-g++") ;
+// not used here
+QtVersion <- _T("");
+// local
+QtLocalPathQt	 <- _T("qt");
+
+function BeginWizard()
+{
+    local intro_msg = _("Welcome to the new 'Qt Group' CbQt5 project wizard!\n" +
+                         "This wizard will guide you to create a new 'CbQt5' project\n" +
+                         "using the 'Qt Group Plc' Qt5.x cross-platform GUI toolkit\n\n" +
+                         "When you're ready to proceed, please click \"Next\"...");
+/// -> cbqt5
+	local  advice_msg =_("This is an experimental wizard, using a plugin\n" +
+						 "'QtPreGen-x.y.z', which allows generate additional files for Qt:\n" +
+						 "- meta-objects ('Q_OBJECT', 'Q_GADGET' in .h, .hpp, .cpp)\n" +
+						 "- forms (.ui)\n" +
+						 "- resources (.qrc).\n" +
+						 "When you're ready to proceed, please click \"Next\"...\n\n");
+/// <--
+
+    local qtpath_msg = _("Please select the location of Qt5 on your computer.\n" +
+                          "This is the top-level folder where Qt5 was installed.\n" +
+                          "To help you, this folder must contain the subfolders\n" +
+                          "\"include\" and \"lib\".");
+
+    Wizard.AddInfoPage(_T("QtIntro"), intro_msg);
+///--> cbqt5
+    Wizard.AddInfoPage(_T("QtAdvice"), advice_msg);
+/// <--
+    Wizard.AddGenericSelectPathPage(_T("QtPath"), qtpath_msg, _("Qt's location:"), QtPathDefault5);
+
+    Wizard.AddProjectPathPage();
+
+    Wizard.AddCompilerPage(_T(""), _T("gcc*"), true, true);
+
+	//Wizard.AddBuildTargetPage(_T("Infos"), false, false, _T(""), _T("*"),false);
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// Qt's path page
+////////////////////////////////////////////////////////////////////////////////
+
+function OnLeave_QtPath(fwd)
+{
+    if (fwd)
+    {
+		// txtFolder is the text control in GenericSelectPathPage
+        local dir         = Wizard.GetTextControlValue(_T("txtFolder"));
+//print(dir)
+        local dir_nomacro = VerifyDirectory(dir);
+//print(dir_nomacro)
+
+        if (dir_nomacro.IsEmpty())
+            return false;
+
+        QtPathDefault5 = dir;
+        QtPathDefaultInc = QtPathDefault5  +  wxFILE_SEP_PATH + _T("include");
+        QtPathDefaultLib = QtPathDefault5  +  wxFILE_SEP_PATH + _T("lib");
+        ShowMessage(_T("QtPathDefaultInc = ") + QtPathDefaultInc);
+
+        // verify include dependencies
+        local dir_nomacro_inc = GetCompilerIncludeDir(dir, QtPathDefault5, QtPathDefaultInc);
+        ShowMessage(_T("dir_nomacro_inc = ") + dir_nomacro_inc);
+//print(dir_nomacro_inc)
+        if (dir_nomacro_inc.IsEmpty())
+            return false;
+        if (PLATFORM == PLATFORM_MSW
+            && !VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + _T("QtWidgets"), _T("QApplication"), _("Qt's include")))
+            return false;
+		else
+		{
+		//if (PLATFORM != PLATFORM_MSW && !VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + _T("QtWidgets"), _T("QApplication"), _("Qt's include")))
+        //    return false
+            ;
+		}
+
+        // verify library dependencies
+        local dir_nomacro_lib = GetCompilerLibDir(dir, QtPathDefault5, QtPathDefaultLib);
+//print(dir_nomacro_lib)
+        if (dir_nomacro_lib.IsEmpty())
+            return false;
+
+        if (PLATFORM == PLATFORM_MSW && !VerifyLibFile(dir_nomacro_lib, _T("Qt5Core"), _T("Qt's")))
+            return false;
+        else //
+        if (PLATFORM != PLATFORM_MSW && !VerifyLibFile(dir_nomacro_lib, _T("QtCore"), _T("Qt's")))
+            return false;
+
+        // Remember the original selection.
+       // QtPath5 = dir;
+
+        local is_macro = _T("");
+
+        // try to resolve the include directory as macro
+        is_macro = GetCompilerIncludeMacro(dir, QtPathDefault5, QtPathDefaultInc);
+        if (is_macro.IsEmpty())
+        {
+            // not possible -> use the real inc path we had computed instead
+            QtPathDefaultInc = dir_nomacro_inc;
+        }
+
+        // try to resolve the library directory as macro
+        is_macro = GetCompilerLibMacro(dir, QtPathDefault5, QtPathDefaultLib);
+        if (is_macro.IsEmpty())
+        {
+            // not possible -> use the real lib path we had computed instead
+            QtPathDefaultLib = dir_nomacro_lib;
+        }
+    }
+    return true;
+}
+
+// return the files this project contains
+function GetFilesDir()
+{
+/// -->  cbqt5
+	// -> main.cpp, qtest.h, qtest.cpp
+	return _T("cbqt5/files");
+/// <--
+}
+
+// setup the already created project
+function SetupProject(project)
+{
+/// qt = $(#qt5)
+	project.SetVar(QtLocalPathQt, QtPathDefault5, false);
+/// replace $(#qt5) by $qt ( or $(qt)
+	local dir ;
+	QtPathDefaultInc.Replace(QtPathDefault5, _T("$(") + QtLocalPathQt + _T(")")) ;
+	//dir =  ReplaceMacros(QtPathDefaultInc, true);
+	//ShowMessage(_T("QtPathDefaultInc = ") + QtPathDefaultInc);
+	//ShowMessage(_T("dir = ") + dir);
+	//dir = VerifyDirectory(QtPathDefaultInc);
+	//if (dir.IsEmpty())
+	//	return false;
+	QtPathDefaultLib.Replace(QtPathDefault5, _T("$") + QtLocalPathQt);
+	//dir = VerifyDirectory(QtPathDefaultLib);
+	//if (dir.IsEmpty())
+	//	return false;
+
+    project.AddIncludeDir(QtPathDefaultInc);
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtGui"));
+/// --> cbqt5
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtWidgets"));
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtCore"));
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtXml"));
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("ActiveQt"));
+	project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + QtPathSpecs);
+/// <--
+    project.AddLibDir(QtPathDefaultLib);
+/// --> cbqt5
+    project.AddCompilerOption (_T("-frtti"));
+    project.AddCompilerOption (_T("-DUNICODE"));
+    /// qt > 5.6
+  //  project.AddCompilerOption (_T("-DQT_LARGEFILE_SUPPORT"));
+	project.AddCompilerOption (_T("-std=gnu++11"));
+	///
+    project.AddCompilerOption (_T("-DQT_GUI_LIB"));
+    project.AddCompilerOption (_T("-DQT_CORE_LIB") );
+    project.AddCompilerOption (_T("-DQT_HAVE_MMX") );
+    project.AddCompilerOption (_T("-DQT_HAVE_3DNOW"));
+    project.AddCompilerOption (_T("-DQT_HAVE_SSE") );
+    project.AddCompilerOption (_T("-DQT_HAVE_MMXEXT"));
+    project.AddCompilerOption (_T("-DQT_HAVE_SSE2") );
+  //  project.AddCompilerOption (_T("-DQT_NEEDS_QMAIN") );
+
+ // enable compiler exception
+    local idcompiler = Wizard.GetCompilerID();
+	CppExceptionsOn(project, idcompiler);
+//print(idcompiler);
+	if (idcompiler.Find(_T("gcc")) != -1)
+	{
+		project.AddCompilerOption(_T("-mthreads")) ;
+		project.AddCompilerOption (_T("-DQT_THREAD_SUPPORT"));
+		project.AddLinkerOption (_T("-mthreads") );
+	}
+
+    project.AddLinkerOption (_T("--enable-stcall-fixup") );
+    project.AddLinkerOption (_T("--enable-auto-import") );
+    project.AddLinkerOption (_T("--enable-runtime-pseudo-reloc") );
+    if (PLATFORM == PLATFORM_MSW)
+	{
+		project.AddLinkerOption (_T("-mconsole") );
+		project.AddLinkerOption (_T("-mwindows") );
+    }
+    else {
+    	/// ...
+    }
+/// <--
+    // enable compiler warnings (project-wide)
+    WarningsOn(project, idcompiler);
+
+    // Debug
+    local target = project.GetBuildTarget(Wizard.GetDebugName());
+    if (!IsNull(target))
+    {
+		// ttConsoleOnly: console for debugging
+        target.SetTargetType(ttConsoleOnly);
+        target.AddLibDir(QtPathDefaultLib);
+/// -> cbqt5
+		// add link libraries
+		if (PLATFORM == PLATFORM_MSW)    {
+			target.AddLinkLib(_T("Qt5Cored"));
+			target.AddLinkLib(_T("Qt5Guid"));
+			target.AddLinkLib(_T("Qt5Widgetsd"));
+			target.AddLinkLib(_T("Qt5Xmld"));
+		}
+		else { // to verify
+			target.AddLinkLib(_T("QtCored"));
+			target.AddLinkLib(_T("QtGuid"));
+			target.AddLinkLib(_T("QtWidgetsd"));
+			target.AddLinkLib(_T("QtXmld"));
+		}
+/// <--
+        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
+        // enable generation of debugging symbols for target
+        DebugSymbolsOn(target, Wizard.GetCompilerID());
+    }
+
+    // Release
+    local target = project.GetBuildTarget(Wizard.GetReleaseName());
+    if (!IsNull(target))
+    {
+		// ttExecutable: no console
+        target.SetTargetType(ttExecutable);
+        target.AddLibDir(QtPathDefaultLib);
+/// -> cbqt5
+        // add link libraries
+		if (PLATFORM == PLATFORM_MSW) {
+			target.AddLinkLib(_T("Qt5Core"));
+			target.AddLinkLib(_T("Qt5Gui"));
+			target.AddLinkLib(_T("Qt5Widgets"));
+			target.AddLinkLib(_T("Qt5Xml"));
+		}
+		else { // to verify
+			target.AddLinkLib(_T("QtCore"));
+			target.AddLinkLib(_T("QtGui"));
+			target.AddLinkLib(_T("QtWidgets"));
+			target.AddLinkLib(_T("QtXml"));
+		}
+/// <--
+        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
+        // enable optimizations for target
+        OptimizationsOn(target, Wizard.GetCompilerID());
+    }
+/*
+    // Infos
+    local target = project.GetBuildTarget(Wizard.GetTargetName());
+    ShowMessage(Wizard.GetTargetName());
+    if (!IsNull(target))
+	{
+    // ttCommandOnly
+        target.SetTargetType(ttCommandsOnly);
+	}
+*/
+
+    return true;
+}
Index: src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp	(copie de travail)
@@ -0,0 +1,19 @@
+//------------------------------------------------------------------------------
+// project CbQt  with Qt5.x
+// main.cpp
+//------------------------------------------------------------------------------
+#include <QApplication>
+
+#include "qtest.h"
+//------------------------------------------------------------------------------
+int main(int argc, char *argv[])
+{
+
+	QApplication a(argc, argv);
+
+	Qtest w;
+	w.show();
+
+	return a.exec();
+}
+//------------------------------------------------------------------------------
Index: src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp	(copie de travail)
@@ -0,0 +1,36 @@
+//------------------------------------------------------------------------------
+// qtest.cpp
+//------------------------------------------------------------------------------
+#include "qtest.h"
+
+#include <QMessageBox>
+//------------------------------------------------------------------------------
+//ctor
+Qtest::Qtest(QWidget *parent, Qt::WindowFlags  flags)
+	: QWidget(parent, flags)
+{
+	setMinimumSize(140, 40) ;
+
+    button = new QPushButton("Test", this);
+
+   	connect( button, SIGNAL(clicked()), this, SLOT(press()) );
+
+   	connect( this, SIGNAL(click()), this, SLOT(message()) );
+}
+//------------------------------------------------------------------------------
+//dtor
+Qtest::~Qtest()
+{
+}
+//------------------------------------------------------------------------------
+void Qtest::press()
+{
+    QMessageBox::information(this, "Qtest", "Slots is OK !");
+    emit click();
+}
+//------------------------------------------------------------------------------
+void Qtest::message()
+{
+    QMessageBox::information(this, "Qtest", "Signals is OK !");
+}
+//------------------------------------------------------------------------------
Index: src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h	(copie de travail)
@@ -0,0 +1,47 @@
+//------------------------------------------------------------------------------
+// qtest.h
+//------------------------------------------------------------------------------
+#ifndef _QTEST_H
+#define _QTEST_H
+//------------------------------------------------------------------------------
+#include <QWidget>
+#include <QPushButton>
+//------------------------------------------------------------------------------
+/** \brief  : Application test for QtPregen
+ */
+class Qtest : public QWidget
+{
+	Q_OBJECT
+
+    public:
+    	/** \brief Test application constructor
+    	 *  @param parent : widget parent
+    	 *  @param flags : widget flags
+    	 */
+		Qtest ( QWidget *parent = 0, Qt::WindowFlags flags = 0 );
+		/** \brief Test application destructor
+    	 */
+		virtual ~Qtest ();
+
+    protected:
+
+	protected slots:
+		/** \brief  : Message button clicked
+		 */
+		void press();
+		/** \brief : Message button click
+		 */
+		void message();
+
+    private:
+    	/** \brief  : Button
+		 */
+        QPushButton * button;
+
+    signals:
+    	/** \brief  : Button click signal
+		 */
+        void click();
+};
+
+#endif // _QTEST_H
Index: src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/main.cpp	(copie de travail)
@@ -0,0 +1,19 @@
+//------------------------------------------------------------------------------
+// project CbQt  with Qt5.x
+// main.cpp
+//------------------------------------------------------------------------------
+#include <QApplication>
+
+#include "qtest.h"
+//------------------------------------------------------------------------------
+int main(int argc, char *argv[])
+{
+
+	QApplication a(argc, argv);
+
+	Qtest w;
+	w.show();
+
+	return a.exec();
+}
+//------------------------------------------------------------------------------
Index: src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/qtest.cpp	(copie de travail)
@@ -0,0 +1,36 @@
+//------------------------------------------------------------------------------
+// qtest.cpp
+//------------------------------------------------------------------------------
+#include "qtest.h"
+
+#include <QMessageBox>
+//------------------------------------------------------------------------------
+//ctor
+Qtest::Qtest(QWidget *parent, Qt::WindowFlags  flags)
+	: QWidget(parent, flags)
+{
+	setMinimumSize(140, 40) ;
+
+    button = new QPushButton("Test", this);
+
+   	connect( button, SIGNAL(clicked()), this, SLOT(press()) );
+
+   	connect( this, SIGNAL(click()), this, SLOT(message()) );
+}
+//------------------------------------------------------------------------------
+//dtor
+Qtest::~Qtest()
+{
+}
+//------------------------------------------------------------------------------
+void Qtest::press()
+{
+    QMessageBox::information(this, "Qtest", "Slots is OK !");
+    emit click();
+}
+//------------------------------------------------------------------------------
+void Qtest::message()
+{
+    QMessageBox::information(this, "Qtest", "Signals is OK !");
+}
+//------------------------------------------------------------------------------
Index: src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/files/qtest.h	(copie de travail)
@@ -0,0 +1,47 @@
+//------------------------------------------------------------------------------
+// qtest.h
+//------------------------------------------------------------------------------
+#ifndef _QTEST_H
+#define _QTEST_H
+//------------------------------------------------------------------------------
+#include <QWidget>
+#include <QPushButton>
+//------------------------------------------------------------------------------
+/** \brief  : Application test for QtPregen
+ */
+class Qtest : public QWidget
+{
+	Q_OBJECT
+
+    public:
+    	/** \brief Test application constructor
+    	 *  @param parent : widget parent
+    	 *  @param flags : widget flags
+    	 */
+		Qtest ( QWidget *parent = 0, Qt::WindowFlags flags = 0 );
+		/** \brief Test application destructor
+    	 */
+		virtual ~Qtest ();
+
+    protected:
+
+	protected slots:
+		/** \brief  : Message button clicked
+		 */
+		void press();
+		/** \brief : Message button click
+		 */
+		void message();
+
+    private:
+    	/** \brief  : Button
+		 */
+        QPushButton * button;
+
+    signals:
+    	/** \brief  : Button click signal
+		 */
+        void click();
+};
+
+#endif // _QTEST_H
Index: src/plugins/scriptedwizard/resources/cbqt5/logo.png
===================================================================
Impossible d'afficher : fichier considéré comme binaire.
svn:mime-type = application/octet-stream
Index: src/plugins/scriptedwizard/resources/cbqt5/logo.png
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/logo.png	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/logo.png	(copie de travail)

Modification de propriétés sur src/plugins/scriptedwizard/resources/cbqt5/logo.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: src/plugins/scriptedwizard/resources/cbqt5/wizard.png
===================================================================
Impossible d'afficher : fichier considéré comme binaire.
svn:mime-type = application/octet-stream
Index: src/plugins/scriptedwizard/resources/cbqt5/wizard.png
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/wizard.png	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/wizard.png	(copie de travail)

Modification de propriétés sur src/plugins/scriptedwizard/resources/cbqt5/wizard.png
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: src/plugins/scriptedwizard/resources/cbqt5/wizard.script
===================================================================
--- src/plugins/scriptedwizard/resources/cbqt5/wizard.script	(nonexistent)
+++ src/plugins/scriptedwizard/resources/cbqt5/wizard.script	(copie de travail)
@@ -0,0 +1,274 @@
+////////////////////////////////////////////////////////////////////////////////
+//
+// Code::Blocks new project wizard script
+//
+// Project	: CbQt5 project  :  (with Qt5.x only)
+// Author	: LETARTARE http://forums.codeblocks.org
+// Modified	: LETARTARE June 18, 2019
+//
+////////////////////////////////////////////////////////////////////////////////
+
+// globals
+QtPathDefault5   <- _T("$(#qt5)");
+QtPathDefaultInc <- _T("");
+QtPathDefaultLib <- _T("");
+QtPath5 <- _T("");
+QtPathSpecs <- _T("mkspecs") + wxFILE_SEP_PATH + _T("win32-g++") ;
+// not used here
+QtVersion <- _T("");
+// local
+QtLocalPathQt	 <- _T("qt");
+
+function BeginWizard()
+{
+    local intro_msg = _("Welcome to the new 'Qt Group' CbQt5 project wizard!\n" +
+                         "This wizard will guide you to create a new 'CbQt5' project\n" +
+                         "using the 'Qt Group Plc' Qt5.x cross-platform GUI toolkit\n\n" +
+                         "When you're ready to proceed, please click \"Next\"...");
+/// -> cbqt5
+	local  advice_msg =_("This is an experimental wizard, using a plugin\n" +
+						 "'QtPreGen-x.y.z', which allows generate additional files for Qt:\n" +
+						 "- meta-objects ('Q_OBJECT', 'Q_GADGET' in .h, .hpp, .cpp)\n" +
+						 "- forms (.ui)\n" +
+						 "- resources (.qrc).\n" +
+						 "When you're ready to proceed, please click \"Next\"...\n\n");
+/// <--
+
+    local qtpath_msg = _("Please select the location of Qt5 on your computer.\n" +
+                          "This is the top-level folder where Qt5 was installed.\n" +
+                          "To help you, this folder must contain the subfolders\n" +
+                          "\"include\" and \"lib\".");
+
+    Wizard.AddInfoPage(_T("QtIntro"), intro_msg);
+///--> cbqt5
+    Wizard.AddInfoPage(_T("QtAdvice"), advice_msg);
+/// <--
+    Wizard.AddGenericSelectPathPage(_T("QtPath"), qtpath_msg, _("Qt's location:"), QtPathDefault5);
+
+    Wizard.AddProjectPathPage();
+
+    Wizard.AddCompilerPage(_T(""), _T("gcc*"), true, true);
+
+	//Wizard.AddBuildTargetPage(_T("Infos"), false, false, _T(""), _T("*"),false);
+}
+
+////////////////////////////////////////////////////////////////////////////////
+// Qt's path page
+////////////////////////////////////////////////////////////////////////////////
+
+function OnLeave_QtPath(fwd)
+{
+    if (fwd)
+    {
+		// txtFolder is the text control in GenericSelectPathPage
+        local dir         = Wizard.GetTextControlValue(_T("txtFolder"));
+//print(dir)
+        local dir_nomacro = VerifyDirectory(dir);
+//print(dir_nomacro)
+
+        if (dir_nomacro.IsEmpty())
+            return false;
+
+        QtPathDefault5 = dir;
+        QtPathDefaultInc = QtPathDefault5  +  wxFILE_SEP_PATH + _T("include");
+        QtPathDefaultLib = QtPathDefault5  +  wxFILE_SEP_PATH + _T("lib");
+        ShowMessage(_T("QtPathDefaultInc = ") + QtPathDefaultInc);
+
+        // verify include dependencies
+        local dir_nomacro_inc = GetCompilerIncludeDir(dir, QtPathDefault5, QtPathDefaultInc);
+        ShowMessage(_T("dir_nomacro_inc = ") + dir_nomacro_inc);
+//print(dir_nomacro_inc)
+        if (dir_nomacro_inc.IsEmpty())
+            return false;
+        if (PLATFORM == PLATFORM_MSW
+            && !VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + _T("QtWidgets"), _T("QApplication"), _("Qt's include")))
+            return false;
+		else
+		{
+		//if (PLATFORM != PLATFORM_MSW && !VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + _T("QtWidgets"), _T("QApplication"), _("Qt's include")))
+        //    return false
+            ;
+		}
+
+        // verify library dependencies
+        local dir_nomacro_lib = GetCompilerLibDir(dir, QtPathDefault5, QtPathDefaultLib);
+//print(dir_nomacro_lib)
+        if (dir_nomacro_lib.IsEmpty())
+            return false;
+
+        if (PLATFORM == PLATFORM_MSW && !VerifyLibFile(dir_nomacro_lib, _T("Qt5Core"), _T("Qt's")))
+            return false;
+        else //
+        if (PLATFORM != PLATFORM_MSW && !VerifyLibFile(dir_nomacro_lib, _T("QtCore"), _T("Qt's")))
+            return false;
+
+        // Remember the original selection.
+       // QtPath5 = dir;
+
+        local is_macro = _T("");
+
+        // try to resolve the include directory as macro
+        is_macro = GetCompilerIncludeMacro(dir, QtPathDefault5, QtPathDefaultInc);
+        if (is_macro.IsEmpty())
+        {
+            // not possible -> use the real inc path we had computed instead
+            QtPathDefaultInc = dir_nomacro_inc;
+        }
+
+        // try to resolve the library directory as macro
+        is_macro = GetCompilerLibMacro(dir, QtPathDefault5, QtPathDefaultLib);
+        if (is_macro.IsEmpty())
+        {
+            // not possible -> use the real lib path we had computed instead
+            QtPathDefaultLib = dir_nomacro_lib;
+        }
+    }
+    return true;
+}
+
+// return the files this project contains
+function GetFilesDir()
+{
+/// -->  cbqt5
+	// -> main.cpp, qtest.h, qtest.cpp
+	return _T("cbqt5/files");
+/// <--
+}
+
+// setup the already created project
+function SetupProject(project)
+{
+/// qt = $(#qt5)
+	project.SetVar(QtLocalPathQt, QtPathDefault5, false);
+/// replace $(#qt5) by $qt ( or $(qt)
+	local dir ;
+	QtPathDefaultInc.Replace(QtPathDefault5, _T("$(") + QtLocalPathQt + _T(")")) ;
+	//dir =  ReplaceMacros(QtPathDefaultInc, true);
+	//ShowMessage(_T("QtPathDefaultInc = ") + QtPathDefaultInc);
+	//ShowMessage(_T("dir = ") + dir);
+	//dir = VerifyDirectory(QtPathDefaultInc);
+	//if (dir.IsEmpty())
+	//	return false;
+	QtPathDefaultLib.Replace(QtPathDefault5, _T("$") + QtLocalPathQt);
+	//dir = VerifyDirectory(QtPathDefaultLib);
+	//if (dir.IsEmpty())
+	//	return false;
+
+    project.AddIncludeDir(QtPathDefaultInc);
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtGui"));
+/// --> cbqt5
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtWidgets"));
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtCore"));
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("QtXml"));
+    project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + _T("ActiveQt"));
+	project.AddIncludeDir(QtPathDefaultInc + wxFILE_SEP_PATH + QtPathSpecs);
+/// <--
+    project.AddLibDir(QtPathDefaultLib);
+/// --> cbqt5
+    project.AddCompilerOption (_T("-frtti"));
+    project.AddCompilerOption (_T("-DUNICODE"));
+    /// qt > 5.6
+  //  project.AddCompilerOption (_T("-DQT_LARGEFILE_SUPPORT"));
+	project.AddCompilerOption (_T("-std=gnu++11"));
+	///
+    project.AddCompilerOption (_T("-DQT_GUI_LIB"));
+    project.AddCompilerOption (_T("-DQT_CORE_LIB") );
+    project.AddCompilerOption (_T("-DQT_HAVE_MMX") );
+    project.AddCompilerOption (_T("-DQT_HAVE_3DNOW"));
+    project.AddCompilerOption (_T("-DQT_HAVE_SSE") );
+    project.AddCompilerOption (_T("-DQT_HAVE_MMXEXT"));
+    project.AddCompilerOption (_T("-DQT_HAVE_SSE2") );
+  //  project.AddCompilerOption (_T("-DQT_NEEDS_QMAIN") );
+
+ // enable compiler exception
+    local idcompiler = Wizard.GetCompilerID();
+	CppExceptionsOn(project, idcompiler);
+//print(idcompiler);
+	if (idcompiler.Find(_T("gcc")) != -1)
+	{
+		project.AddCompilerOption(_T("-mthreads")) ;
+		project.AddCompilerOption (_T("-DQT_THREAD_SUPPORT"));
+		project.AddLinkerOption (_T("-mthreads") );
+	}
+
+    project.AddLinkerOption (_T("--enable-stcall-fixup") );
+    project.AddLinkerOption (_T("--enable-auto-import") );
+    project.AddLinkerOption (_T("--enable-runtime-pseudo-reloc") );
+    if (PLATFORM == PLATFORM_MSW)
+	{
+		project.AddLinkerOption (_T("-mconsole") );
+		project.AddLinkerOption (_T("-mwindows") );
+    }
+    else {
+    	/// ...
+    }
+/// <--
+    // enable compiler warnings (project-wide)
+    WarningsOn(project, idcompiler);
+
+    // Debug
+    local target = project.GetBuildTarget(Wizard.GetDebugName());
+    if (!IsNull(target))
+    {
+		// ttConsoleOnly: console for debugging
+        target.SetTargetType(ttConsoleOnly);
+        target.AddLibDir(QtPathDefaultLib);
+/// -> cbqt5
+		// add link libraries
+		if (PLATFORM == PLATFORM_MSW)    {
+			target.AddLinkLib(_T("Qt5Cored"));
+			target.AddLinkLib(_T("Qt5Guid"));
+			target.AddLinkLib(_T("Qt5Widgetsd"));
+			target.AddLinkLib(_T("Qt5Xmld"));
+		}
+		else { // to verify
+			target.AddLinkLib(_T("QtCored"));
+			target.AddLinkLib(_T("QtGuid"));
+			target.AddLinkLib(_T("QtWidgetsd"));
+			target.AddLinkLib(_T("QtXmld"));
+		}
+/// <--
+        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
+        // enable generation of debugging symbols for target
+        DebugSymbolsOn(target, Wizard.GetCompilerID());
+    }
+
+    // Release
+    local target = project.GetBuildTarget(Wizard.GetReleaseName());
+    if (!IsNull(target))
+    {
+		// ttExecutable: no console
+        target.SetTargetType(ttExecutable);
+        target.AddLibDir(QtPathDefaultLib);
+/// -> cbqt5
+        // add link libraries
+		if (PLATFORM == PLATFORM_MSW) {
+			target.AddLinkLib(_T("Qt5Core"));
+			target.AddLinkLib(_T("Qt5Gui"));
+			target.AddLinkLib(_T("Qt5Widgets"));
+			target.AddLinkLib(_T("Qt5Xml"));
+		}
+		else { // to verify
+			target.AddLinkLib(_T("QtCore"));
+			target.AddLinkLib(_T("QtGui"));
+			target.AddLinkLib(_T("QtWidgets"));
+			target.AddLinkLib(_T("QtXml"));
+		}
+/// <--
+        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
+        // enable optimizations for target
+        OptimizationsOn(target, Wizard.GetCompilerID());
+    }
+/*
+    // Infos
+    local target = project.GetBuildTarget(Wizard.GetTargetName());
+    ShowMessage(Wizard.GetTargetName());
+    if (!IsNull(target))
+	{
+    // ttCommandOnly
+        target.SetTargetType(ttCommandsOnly);
+	}
+*/
+
+    return true;
+}
Index: src/plugins/scriptedwizard/resources/config.script
===================================================================
--- src/plugins/scriptedwizard/resources/config.script	(révision 11761)
+++ src/plugins/scriptedwizard/resources/config.script	(copie de travail)
@@ -44,6 +44,7 @@
     RegisterWizard(wizProject,     _T("qt4"),          _T("QT4 project"),           _T("GUI"));
     RegisterWizard(wizProject,     _T("qt4dll"),       _T("QT4 (shared) project"),  _T("GUI"));
     RegisterWizard(wizProject,     _T("qt5"),          _T("QT5 project"),           _T("GUI"));
+    RegisterWizard(wizProject,     _T("cbqt5"),         _T("QT5 project"),           _T("GUI"));
     RegisterWizard(wizProject,     _T("sdl"),          _T("SDL project"),           _T("2D/3D Graphics"));
     RegisterWizard(wizProject,     _T("sdl2"),         _T("SDL2 project"),          _T("2D/3D Graphics"));
     RegisterWizard(wizProject,     _T("sfml"),         _T("SFML project"),          _T("2D/3D Graphics"));
