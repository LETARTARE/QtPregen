Index: include/cbplugin.h
===================================================================
--- include/cbplugin.h	(révision 11246)
+++ include/cbplugin.h	(copie de travail)
@@ -37,7 +37,7 @@
 // this is the plugins SDK version number
 // it will change when the SDK interface breaks
 #define PLUGIN_SDK_VERSION_MAJOR   1
-#define PLUGIN_SDK_VERSION_MINOR   32
+#define PLUGIN_SDK_VERSION_MINOR   33
 #define PLUGIN_SDK_VERSION_RELEASE 0
 
 // class decls
Index: include/sdk_events.h
===================================================================
--- include/sdk_events.h	(révision 11246)
+++ include/sdk_events.h	(copie de travail)
@@ -478,6 +478,19 @@
 
 // settings events
 
+// Defines the futur current state of the compiler.
+// to use with 'cbEVT_COMPILER_STARTED' in  'm_commandInt' or 'm_clientData'
+enum cbFutureBuild
+{
+    fbNone = 10,
+    fbBuild,
+    fbClean,
+    fbRebuild,
+    fbWorkspaceBuild,
+    fbWorkspaceClean,
+    fbWorkspaceReBuild
+};
+
 // event.GetInt() returns value of type cbSettingsType::Type indicating which setting group was changed
 struct cbSettingsType
 {
Index: plugins/compilergcc/compilergcc.cpp
===================================================================
--- plugins/compilergcc/compilergcc.cpp	(révision 11246)
+++ plugins/compilergcc/compilergcc.cpp	(copie de travail)
@@ -303,6 +303,7 @@
     m_LastBuildStep(true),
     m_RunTargetPostBuild(false),
     m_RunProjectPostBuild(false),
+    m_Workspace(false), m_Pregen(false),
     m_IsWorkspaceOperation(false),
     m_LogBuildProgressPercentage(false)
 {
@@ -343,6 +344,7 @@
     m_Clean = false;
     m_Build = false;
     m_LastBuildStep = true;
+    m_Workspace = false; m_Pregen = false;
     m_IsWorkspaceOperation = false;
 
     m_timerIdleWakeUp.SetOwner(this, idTimerPollCompiler);
@@ -417,8 +419,9 @@
     Manager::Get()->RegisterEventSink(cbEVT_PROJECT_OPEN,             new cbEventFunctor<CompilerGCC, CodeBlocksEvent>(this, &CompilerGCC::OnProjectLoaded));
     Manager::Get()->RegisterEventSink(cbEVT_PROJECT_CLOSE,            new cbEventFunctor<CompilerGCC, CodeBlocksEvent>(this, &CompilerGCC::OnProjectUnloaded));
     Manager::Get()->RegisterEventSink(cbEVT_PROJECT_TARGETS_MODIFIED, new cbEventFunctor<CompilerGCC, CodeBlocksEvent>(this, &CompilerGCC::OnProjectActivated));
-
     Manager::Get()->RegisterEventSink(cbEVT_COMPILE_FILE_REQUEST,     new cbEventFunctor<CompilerGCC, CodeBlocksEvent>(this, &CompilerGCC::OnCompileFileRequest));
+    Manager::Get()->RegisterEventSink(wxEVT_COMMAND_MENU_SELECTED,    new cbEventFunctor<CompilerGCC, CodeBlocksEvent>(this, &CompilerGCC::OnDispatcher));
+///
 }
 
 void CompilerGCC::OnRelease(bool appShutDown)
@@ -619,7 +622,7 @@
 {
     int eventId = event.GetId();
 
-//    Manager::Get()->GetMessageManager()->Log(wxT("Dispatcher")));
+//    Manager::Get()->GetLogManager()->LogWarning(wxT("Dispatcher -> ") + (wxString()<<eventId));
 
     if (eventId == idMenuRun)
         OnRun(event);
@@ -654,8 +657,12 @@
         OnCleanAll(event);
     else if (eventId == idMenuCleanFromProjectManager)
         OnClean(event);
-    else if (eventId == idMenuKillProcess)
+    else
+    if (eventId == idMenuKillProcess)
+    {
+Manager::Get()->GetLogManager()->LogWarning(_T("Manual call 'OnKillProcess()"));
         OnKillProcess(event);
+    }
     else if (eventId == idMenuNextError)
         OnNextError(event);
     else if (eventId == idMenuPreviousError)
@@ -1034,6 +1041,10 @@
         CodeBlocksLogEvent evtSwitch(cbEVT_SWITCH_TO_LOG_WINDOW, m_pLog);
         Manager::Get()->ProcessEvent(evtSwitch);
 
+        wxString filename = UnixFilename(fname);
+        // fired  cbEVT_COMPILER_STARTED with id == 1
+        DoPreGenFile(filename);
+
         CompileFile( UnixFilename(fname) );
     }
 }
@@ -1441,7 +1452,7 @@
         // fill the menu and combo
         for (size_t x = 0; x < m_Targets.GetCount(); ++x)
         {
-            if (m_TargetMenu && x < maxTargetInMenus)
+            if (m_TargetMenu && x < static_cast<size_t>(maxTargetInMenus))
             {
                 wxString help;
                 help.Printf(_("Build target '%s' in current project"), GetTargetString(x).wx_str());
@@ -1451,7 +1462,7 @@
                 m_pToolTarget->Append(GetTargetString(x));
         }
 
-        if (m_TargetMenu && m_Targets.size() > maxTargetInMenus)
+        if (m_TargetMenu && m_Targets.size() > static_cast<size_t>(maxTargetInMenus) )
         {
             m_TargetMenu->Append(idMenuSelectTargetHasMore, _("More targets available..."),
                                  _("Use the select target menu item to see them!"));
@@ -2159,6 +2170,7 @@
     m_pLastBuildingTarget  = 0;
     m_BuildingTargetName   = target;
     m_CommandQueue.Clear();
+    m_Workspace            = job == bjWorkspace;
 }
 
 void CompilerGCC::ResetBuildState()
@@ -2358,6 +2370,10 @@
 
         case bsTargetPreBuild:
         {
+            if (m_Build)
+            // fired  cbEVT_COMPILER_STARTED for QtPregen plugin
+                DoPreGen(GetFutureBuild());
+
             // check if it should build with "All"
             // run target pre-build steps
             cmds = dc.GetPreBuildCommands(bt);
@@ -2395,6 +2411,9 @@
 
         case bsTargetBuild:
         {
+            // Qtpregen is finish
+            m_Pregen = false;
+
             PrintBanner(baBuild, m_pBuildingProject, bt);
 
             // run target build
@@ -2507,6 +2526,7 @@
         default:
             break;
     }
+
     m_NextBuildState = GetNextStateBasedOnJob();
     AddToCommandQueue(cmds);
     Manager::Yield();
@@ -2854,8 +2874,16 @@
 {
     ResetBuildState();
     m_RunAfterCompile = false;
-    if (!IsProcessRunning())
+
+    if (!IsProcessRunning() && ! m_Pregen)
         return 0;
+
+    if (m_Pregen)
+    {
+        LogMessage(_("Aborting pre-build ..."), cltInfo, ltMessages);
+        m_Pregen = false;
+    }
+    else
     if (!m_CommandQueue.LastCommandWasRun())
         LogMessage(_("Aborting build..."), cltInfo, ltMessages);
     wxKillError ret = wxKILL_OK;
@@ -2909,7 +2937,7 @@
 
 bool CompilerGCC::IsRunning() const
 {
-    return m_BuildJob != bjIdle || IsProcessRunning() || m_CommandQueue.GetCount();
+    return m_Pregen || m_BuildJob != bjIdle || IsProcessRunning() || m_CommandQueue.GetCount() ;
 }
 
 ProjectBuildTarget* CompilerGCC::GetBuildTargetForFile(ProjectFile* pf)
@@ -3256,7 +3284,12 @@
 
 void CompilerGCC::OnKillProcess(cb_unused wxCommandEvent& event)
 {
-    KillProcess();
+wxString msg = _T("CompilerGCC::OnKillProcess(...) : ") + (wxString()<<event.GetId());
+Manager::Get()->GetLogManager()->LogWarning(msg);
+    if (IsProcessRunning())
+        KillProcess();
+    else
+        AbortPreBuild(event);
 }
 
 void CompilerGCC::OnSelectTarget(wxCommandEvent& event)
@@ -3354,6 +3387,12 @@
         tbar->EnableTool(idMenuRun,           !running && (prj || ed) && !otherRunning);
         tbar->EnableTool(idMenuCompileAndRun, !running && (prj || ed) && !otherRunning);
         tbar->EnableTool(idMenuRebuild,       !running && prj         && !otherRunning);
+      /*
+if (m_Pregen)
+{
+    Manager::Get()->GetLogManager()->LogWarning(_("CompilerGCC::OnUpdateUI() -> ") + (wxString()<<(running && prj) ));
+}
+*/
         tbar->EnableTool(idMenuKillProcess,    running && prj);
         tbar->EnableTool(idMenuSelectTargetDialog, !running && prj && !otherRunning);
 
@@ -3959,3 +3998,97 @@
     return wxString::Format(_("%d minute(s), %d second(s)"), mins, secs);
 #endif // NO_TRANSLATION
 }
+
+
+cbFutureBuild CompilerGCC::GetFutureBuild()
+{
+    enum cbFutureBuild FBuild = fbNone;
+    if (! m_Workspace)
+    {
+        if (! m_Clean && m_Build)
+            FBuild = fbBuild;
+        else
+        if (m_Clean && ! m_Build)
+            FBuild = fbClean ;
+        else
+        if (m_Clean && m_Build)
+            FBuild = fbRebuild ;
+    }
+    else
+    {
+        if (! m_Clean && m_Build)
+            FBuild = fbWorkspaceBuild;
+        else
+        if (m_Clean && ! m_Build)
+            FBuild = fbWorkspaceClean ;
+        else
+        if (m_Clean && m_Build)
+            FBuild = fbWorkspaceReBuild ;
+    }
+
+    return FBuild;
+}
+
+void CompilerGCC::DoPreGen(const cbFutureBuild action)
+{
+    if (m_CommandQueue.GetCount() == 0)
+    {
+        m_Pregen = true;
+        // update mbar, tbar
+        wxUpdateUIEvent uievent;
+        OnUpdateUI(uievent);
+        // project/target pairs + cbFutureBuild
+        CodeBlocksEvent evt(cbEVT_COMPILER_STARTED, 1, m_pBuildingProject, 0, this);
+        evt.SetBuildTargetName(m_BuildingTargetName);
+        evt.SetInt(static_cast<int>(action));
+    // id menu killprocess
+        evt.SetX(idMenuKillProcess);
+
+        Manager::Get()->ProcessEvent(evt);
+    }
+    Manager::Yield();
+}
+
+void CompilerGCC::DoPreGenFile(const wxString& file)
+{
+    if (m_CommandQueue.GetCount() == 0)
+    {
+        m_Pregen = true;
+        // update mbar, tbar
+        wxUpdateUIEvent uievent;
+        OnUpdateUI(uievent);
+
+        CodeBlocksEvent evt(cbEVT_COMPILER_STARTED, 1, m_pProject, 0, this);
+        evt.SetString(file);
+        evt.SetInt(static_cast<int>(fbBuild));
+    // id menu killprocess
+        evt.SetX(idMenuKillProcess);
+        Manager::Get()->ProcessEvent(evt);
+    }
+    Manager::Yield();
+}
+
+void CompilerGCC::OnDispatcher(CodeBlocksEvent& event)
+{
+    bool abort = (event.GetId() == idMenuKillProcess) && (event.GetInt() == idMenuKillProcess) ;
+    if (abort)
+    {
+        wxString msg = _T("Aborting DoPregen : ") + (wxString()<<event.GetId());
+        Manager::Get()->GetLogManager()->LogWarning(msg);
+        KillProcess() ;
+    }
+    else
+        event.Skip();
+}
+
+void CompilerGCC::AbortPreBuild(wxCommandEvent& event)
+{
+    if (m_CommandQueue.GetCount() == 0)
+    {
+        CodeBlocksEvent evt(cbEVT_COMPILER_FINISHED, 1, m_pProject, 0, this);
+        evt.SetInt(static_cast<int>(fbNone));
+        Manager::Get()->ProcessEvent(evt);
+    }
+    Manager::Yield();
+}
+
Index: plugins/compilergcc/compilergcc.h
===================================================================
--- plugins/compilergcc/compilergcc.h	(révision 11246)
+++ plugins/compilergcc/compilergcc.h	(copie de travail)
@@ -151,10 +151,13 @@
         void OnClearErrors(wxCommandEvent& event);
         void OnUpdateUI(wxUpdateUIEvent& event);
         void OnConfig(wxCommandEvent& event);
+
     private:
         friend class CompilerOptionsDlg;
 
         void Dispatcher(wxCommandEvent& event);
+
+
         void TextURL(wxTextUrlEvent& event);
 
         bool StopRunningDebugger();
@@ -179,6 +182,13 @@
         void SaveOptions();
         void LoadOptions();
         void DoRegisterCompilers();
+        // for pre-build
+        cbFutureBuild GetFutureBuild();
+        void DoPreGen(const cbFutureBuild action);
+        void DoPreGenFile(const wxString& file);
+        void OnDispatcher(CodeBlocksEvent& event);
+        void AbortPreBuild(wxCommandEvent& event) ;
+
         void DoPrepareQueue(bool clearLog);
         void NotifyCleanProject(const wxString& target);
         void NotifyCleanWorkspace();
@@ -313,7 +323,8 @@
         // to decide if post-build steps should run
         bool m_RunTargetPostBuild;
         bool m_RunProjectPostBuild;
-
+        bool m_Workspace; // true if Build, Rebuild, Clean workspace
+        bool m_Pregen;    // true if DoPregen(...) is called, false at his end
         bool m_IsWorkspaceOperation; // true for workspace commands
 
         wxString   m_BuildLogFilename;
